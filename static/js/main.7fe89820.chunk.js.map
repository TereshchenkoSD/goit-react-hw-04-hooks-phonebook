{"version":3,"sources":["components/Form/Form.styles.jsx","components/Form/Form.jsx","components/ContactList/ContactList.styles.jsx","components/Contact/Contact.styles.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","components/Title/Title.styles.jsx","components/Title/Title.jsx","App.styles.jsx","App.js","index.js"],"names":["Form","styled","form","Label","label","Input","input","Button","button","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleInputChange","e","currentTarget","value","formReset","preventDefault","type","pattern","title","required","onChange","List","ul","ContactListItem","li","ContactButton","Contact","id","onDeleteContact","onClick","ContactList","contacts","map","FilterLabel","FilterInput","Filter","Heading","h2","Title","text","FormContainer","div","App","setContacts","filter","setFilter","useEffect","savedContacts","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","find","contact","toLowerCase","alert","uuidv4","normalizedFilter","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.7fe89820.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  height: 30px;\r\n\r\n  border-radius: 4px;\r\n\r\n  border: 2px solid lightblue;\r\n\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  min-width: 200px;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  color: rgba(33, 33, 33, 1);\r\n  background-color: rgba(156, 156, 156, 1);\r\n\r\n  font-size: 16px;\r\n  font-weight: 700;\r\n  line-height: 1.875;\r\n  letter-spacing: 0.06em;\r\n\r\n  transition-property: color, background-color, box-shadow;\r\n  transition-duration: 250ms;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: rgba(245, 244, 250, 1);\r\n    background-color: rgba(33, 150, 243, 1);\r\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n      0px 2px 2px rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  & svg {\r\n    height: 24px;\r\n    width: 24px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { CgUserAdd } from 'react-icons/cg';\r\n\r\nimport { Form, Label, Input, Button } from './Form.styles';\r\n\r\nexport const ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleInputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    onSubmit(name, number);\r\n\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label>\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Label>\r\n      <Label>\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          value={number}\r\n          onChange={handleInputChange}\r\n        />\r\n      </Label>\r\n      <Button type=\"submit\">\r\n        <CgUserAdd />\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// export default class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = uuidv4();\r\n\r\n//   handleInputChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onSubmit(this.state);\r\n\r\n//     this.formReset();\r\n//   };\r\n\r\n//   formReset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     return (\r\n//       <Form onSubmit={this.handleSubmit}>\r\n//         <Label>\r\n//           Name\r\n//           <Input\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             value={name}\r\n//             onChange={this.handleInputChange}\r\n//           />\r\n//         </Label>\r\n//         <Label>\r\n//           Number\r\n//           <Input\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             value={number}\r\n//             onChange={this.handleInputChange}\r\n//           />\r\n//         </Label>\r\n//         <Button type=\"submit\">\r\n//           <CgUserAdd />\r\n//           Add contact\r\n//         </Button>\r\n//       </Form>\r\n//     );\r\n//   }\r\n// }\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  width: 100%;\r\n  max-width: 400px;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactListItem = styled.li`\r\n  margin-bottom: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`;\r\n\r\nexport const ContactButton = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  min-width: 150px;\r\n  padding-top: 2px;\r\n  padding-bottom: 2px;\r\n\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n\r\n  color: rgba(33, 33, 33, 1);\r\n  background-color: rgba(156, 156, 156, 1);\r\n\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n  letter-spacing: 0.06em;\r\n\r\n  transition-property: color, background-color, box-shadow;\r\n  transition-duration: 250ms;\r\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: rgba(245, 244, 250, 1);\r\n    background-color: rgba(33, 150, 243, 1);\r\n    box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n      0px 2px 2px rgba(0, 0, 0, 0.12);\r\n  }\r\n\r\n  & svg {\r\n    height: 18px;\r\n    width: 18px;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { BsTrash } from 'react-icons/bs';\r\n\r\nimport { ContactListItem, ContactButton } from './Contact.styles';\r\n\r\nconst Contact = ({ id, name, number, onDeleteContact }) => {\r\n  return (\r\n    <ContactListItem key={id}>\r\n      {name}: {number}\r\n      <ContactButton type=\"button\" onClick={() => onDeleteContact(id)}>\r\n        <BsTrash />\r\n        Delete\r\n      </ContactButton>\r\n    </ContactListItem>\r\n  );\r\n};\r\n\r\nContact.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport { List } from './ContactList.styles';\r\n\r\nimport Contact from '../Contact';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <List>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <Contact\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDeleteContact={onDeleteContact}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FilterLabel = styled.label`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 400px;\r\n  margin-bottom: 15px;\r\n`;\r\n\r\nexport const FilterInput = styled.input`\r\n  height: 30px;\r\n\r\n  border-radius: 4px;\r\n\r\n  border: 2px solid lightblue;\r\n\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  line-height: 1.875;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { FilterLabel, FilterInput } from './Filter.styles';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <FilterLabel>\r\n      Find contacts by name\r\n      <FilterInput type=\"text\" value={value} onChange={onChange}></FilterInput>\r\n    </FilterLabel>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Heading = styled.h2`\r\n  margin-bottom: 10px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Heading } from './Title.styles';\r\n\r\nconst Title = ({ text }) => {\r\n  return <Heading>{text}</Heading>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Title;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const FormContainer = styled.div`\r\n  width: 100%;\r\n  max-width: 500px;\r\n  height: auto;\r\n\r\n  padding: 10px 20px;\r\n  margin: 10px auto;\r\n\r\n  box-shadow: 0px 3px 1px rgba(0, 0, 0, 0.1), 0px 1px 2px rgba(0, 0, 0, 0.08),\r\n    0px 2px 2px rgba(0, 0, 0, 0.12);\r\n`;\r\n","import { useState, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport ContactForm from './components/Form';\r\n\r\nimport ContactList from './components/ContactList';\r\n\r\nimport Filter from './components/Filter';\r\n\r\nimport Title from './components/Title';\r\n\r\n// import initialContacts from './data/contacts.json';\r\n\r\nimport { FormContainer } from './App.styles';\r\n\r\nexport const App = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const addContact = (name, number) => {\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n      )\r\n    ) {\r\n      alert(`${name} is already in the contact list`);\r\n      return;\r\n    }\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    setContacts(contacts => [contact, ...contacts]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const savedContacts = localStorage.getItem('contacts');\r\n\r\n    const parsedContacts = JSON.parse(savedContacts);\r\n\r\n    if (parsedContacts) {\r\n      setContacts(parsedContacts);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }, [contacts]);\r\n\r\n  const deleteContact = contactId => {\r\n    setContacts(contacts.filter(contact => contact.id !== contactId));\r\n  };\r\n\r\n  const changeFilter = e => {\r\n    setFilter(e.currentTarget.value);\r\n  };\r\n\r\n  const getVisibleContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <Title text={'Phonebook'} />\r\n      <ContactForm onSubmit={addContact} />\r\n      <Title text={'Contacts'} />\r\n      <Filter value={filter} onChange={changeFilter} />\r\n      <ContactList\r\n        contacts={getVisibleContacts()}\r\n        onDeleteContact={deleteContact}\r\n      />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}